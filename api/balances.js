const fetch = require("node-fetch");

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

module.exports = async (req, res) => {
  try {
    if (req.method !== "POST") {
      return res.status(405).json({ error: "–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω" });
    }

    const { addresses } = req.body;
    if (!addresses || !Array.isArray(addresses)) {
      return res.status(400).json({ error: "–ù—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤" });
    }

    const API_KEY = process.env.BASESCAN_API_KEY;
    if (!API_KEY) {
      return res.status(500).json({ error: "API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å .env.local –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Vercel" });
    }

    const CONTRACT = "0xc0634090F2Fe6c6d75e61Be2b949464aBB498973"; // Keeta
    const DECIMALS = 18;

    let results = [];

    for (const [i, address] of addresses.entries()) {
      try {
        console.log(`üîç [${i + 1}/${addresses.length}] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å: ${address}`);
        const url = `https://api.basescan.org/api?module=account&action=tokenbalance&contractaddress=${CONTRACT}&address=${address}&tag=latest&apikey=${API_KEY}`;
        console.log("üåç –ó–∞–ø—Ä–æ—Å:", url);

        const response = await fetch(url);
        const data = await response.json();

        console.log("üì¶ –û—Ç–≤–µ—Ç API:", data);

        if (data.status === "1") {
          const balance = Number(data.result) / 10 ** DECIMALS;
          results.push({ address, balance: balance.toFixed(4) });
        } else {
          results.push({ address, balance: "–û—à–∏–±–∫–∞: " + data.message });
        }
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:", err.message);
        results.push({ address, balance: "–û—à–∏–±–∫–∞ API: " + err.message });
      }

      if (i < addresses.length - 1) {
        await delay(600);
      }
    }

    return res.status(200).json(results);

  } catch (err) {
    console.error("üî• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", err.message);
    return res.status(200).json([{ address: "-", balance: "–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: " + err.message }]);
  }
};
